# -*- coding: utf-8 -*-
"""rotaETL_superstore.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14HtQcbKWhRhehuN_AGoPcuYtCGPk8LSu

1. Instalação das bibliotecas
"""

!pip install requests beautifulsoup4 pandas

"""2. Importação das bibliotecas"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

"""3. Definição da URL e headers"""

url = "https://pt.wikipedia.org/wiki/Lista_das_maiores_empresas_do_mundo_por_receita"
headers = { 'User-Agent': 'Mozilla/5.0 ...' }

"""4. Download do conteúdo HTML"""

response = requests.get(url, headers=headers)
response.raise_for_status()

"""5. Parsing com BeautifulSoup"""

soup = BeautifulSoup(response.content, 'html.parser')

"""6. Buscar a tabela desejada na página"""

table = soup.find('table', {'class': 'wikitable'})
if table is None:
    table = soup.find('table', {'class': 'wikitable sortable'})

"""7. Extrair tabela para DataFrame com pandas"""

dfs = pd.read_html(str(table))
df_empresas = dfs[0]

"""8. Visualização da tabela e estrutura"""

print("Tabela extraída com sucesso:")
display(df_empresas.head())
display(df_empresas.info())

"""9. Extração da coluna 'países'"""

paises = []

rows = table.find_all('tr')

for row in rows[1:]:
    cells = row.find_all('td')

    # Verifica se a linha tem células suficientes para pegar o país (normalmente 7 colunas, índice 6)
    if len(cells) > 6:
        pais_cell = cells[6]  # Coluna 7 (índice 6) contém o país
        pais = pais_cell.get_text(strip=True)  # Pega o texto limpo da célula
        paises.append(pais)
    else:
        paises.append(None)  # Caso a linha não tenha dados suficientes, adiciona None

if len(paises) == len(df_empresas):
    df_empresas['País Extraído'] = paises
    print("Coluna 'País Extraído' adicionada ao DataFrame.")
else:
    print("Erro: número de países extraídos não corresponde ao número de linhas do DataFrame.")

print("Valores únicos e contagem na coluna 'Sede':")
display(df_empresas['Sede'].value_counts())
sede_para_pais = {
    'Pequim': 'China',
    'Bentonville (Arkansas)': 'United States',
    'Haia': 'Países Baixos',
    'Irving (Texas)': 'United States',
    'Wolfsburg': 'Germany',
    'Toyota (Aichi)': 'Japan',
    'Cupertino': 'United States',
    'Londres': 'United Kingdom',
    'Omaha (Nebraska)': 'United States',
    'San Francisco': 'United States',
    'Suwon': 'South Korea',
    'Baar': 'Switzerland',
    'Courbevoie': 'France',
    'Houston': 'United States',
    'Tóquio': 'Japan',
    'Stuttgart': 'Germany',
    'Detroit': 'United States',
    'Boston': 'United States',
    'Turim': 'Italy',
    'Munique': 'Germany',
    'Dearborn (Michigan)': 'United States',
    'Rio de Janeiro': 'Brazil',
    'Moscou': 'Russia',
    'Tokyo': 'Japan',
    'Woonsocket (Rhode Island)': 'United States',
    'San Ramon (Califórnia)': 'United States',
    'Düsseldorf': 'Germany',
    'Taiwan': 'Taiwan',
    'Roma': 'Italy',
    'Dallas': 'United States',
    'San Antonio, Texas': 'United States',
    'Minnetonka (Minnesota)': 'United States',
    'Caracas': 'Venezuela',
    'Lucerna': 'Switzerland',
    'Nova York': 'United States',
    'Wayzata (Minnesota)': 'United States',
    'Chesterbrook (Pensilvânia)': 'United States',
    'Wichita (Kansas)': 'United States',
    'Issaquah': 'United States',
    'Palo Alto': 'United States',
    'Mumbai': 'India'
}

df_empresas['País Final'] = df_empresas['Sede'].map(sede_para_pais)
print("\nDataFrame com a nova coluna 'País Final':")
display(df_empresas.head())

print("\nContagem de valores não nulos na coluna 'País Final':")
display(df_empresas['País Final'].count())

print("\nValores únicos na coluna 'País Final':")
display(df_empresas['País Final'].value_counts())

"""10. Importação da base da superstore para comparação"""

import pandas as pd
df_superstore = pd.read_csv('superstore.csv')
display(df_superstore.head())
display(df_superstore.info())

"""11. Limpeza da base de concorrentes"""

# Remove caracteres e converte para float
df_empresas['Receita (bilhões de USD)'] = df_empresas['Receita (bilhões de USD)'].astype(str).str.replace('$','').str.replace(',', '.')
df_empresas['Receita (bilhões de USD)'] = pd.to_numeric(df_empresas['Receita (bilhões de USD)'])

df_empresas['Crescimento da receita'] = df_empresas['Crescimento da receita'].astype(str).str.replace('%','').str.replace(',', '.').str.replace('..', '.')
df_empresas['Crescimento da receita'] = pd.to_numeric(df_empresas['Crescimento da receita'])

df_empresas['Empregados'] = df_empresas['Empregados'].astype(str).str.replace('.', '')
df_empresas['Empregados'] = pd.to_numeric(df_empresas['Empregados'])

df_empresas = df_empresas.drop(columns=['País', 'País Extraído', 'Ref.(s)'])

"""12. Análise sobre os concorrentes"""

print("Unique values in 'Indústria' from df_empresas:")
display(df_empresas['Indústria'].value_counts())

print("\nUnique values in 'category' from df_superstore:")
display(df_superstore['category'].value_counts())

print("\nUnique values in 'sub_category' from df_superstore:")
display(df_superstore['sub_category'].value_counts())

potential_competitor_industries = ['Eletrônicos', 'Varejo']
df_competitors = df_empresas[df_empresas['Indústria'].isin(potential_competitor_industries)].copy()

print("\nPotential Competitors based on Industry:")
display(df_competitors)

print("Distribution of companies in df_competitors by Industry:")
display(df_competitors['Indústria'].value_counts())

print("\nComparing df_competitors industries with df_superstore categories and sub-categories:")
print(f"Industries in df_competitors: {df_competitors['Indústria'].unique()}")
print(f"Categories in df_superstore: {df_superstore['category'].unique()}")
print(f"Sub-categories in df_superstore: {df_superstore['sub_category'].unique()}")

# Escolha setores relevantes
relevant_industries_for_superstore = ['Eletrônicos', 'Varejo']

top_competitors_in_relevant_industries = df_competitors[
    df_competitors['Indústria'].isin(relevant_industries_for_superstore)
].sort_values(by='Classificação').head(10)

print("\nTop 10 Potential Competitors in Industries relevant to Superstore:")
display(top_competitors_in_relevant_industries)

print("\nSuperstore Sales by Year:")
display(df_superstore.groupby('year')['sales'].sum())

print("\nSuperstore Sales by Country:")
display(df_superstore.groupby('country')['sales'].sum().sort_values(ascending=False))

print("\nPotential Competitors Geographical Presence (Countries):")
display(df_competitors['País Final'].value_counts())

# Comparar países em comum
superstore_countries = df_superstore['country'].unique()
competitor_countries = df_competitors['País Final'].unique()

overlapping_countries = list(set(superstore_countries) & set(competitor_countries))

print(f"\nOverlapping Countries between Superstore and Potential Competitors: {overlapping_countries}")

overlapping_countries = ['China', 'Taiwan', 'United States']

df_superstore_integrated = df_superstore[df_superstore['country'].isin(overlapping_countries)].copy()
df_empresas_integrated = df_empresas[df_empresas['País Final'].isin(overlapping_countries)].copy()

print("Filtered df_superstore for overlapping countries:")
display(df_superstore_integrated.head())

print("\nFiltered df_empresas for overlapping countries:")
display(df_empresas_integrated.head())

relevant_industries = ['Eletrônicos', 'Varejo']

df_relevant_competitors_integrated = df_empresas_integrated[
    df_empresas_integrated['Indústria'].isin(relevant_industries)
].copy()

print("Potential competitors in overlapping countries based on relevant industries:")
display(df_relevant_competitors_integrated)

superstore_total_sales_overlapping_countries = df_superstore_integrated['sales'].sum()

print(f"Total Sales of Superstore in overlapping countries ('China', 'Taiwan', 'United States'): ${superstore_total_sales_overlapping_countries:,.2f}")

competitors_total_revenue_overlapping_countries = df_relevant_competitors_integrated[
    df_relevant_competitors_integrated['País Final'].isin(overlapping_countries)
]['Receita (bilhões de USD)'].sum() * 1_000_000_000

print(f"\nTotal Revenue of Relevant Competitors (headquartered in overlapping countries): ${competitors_total_revenue_overlapping_countries:,.2f}")

print("\nContextualizing the comparison:")
print("Superstore's sales are based on specific product lines and years.")
print("Competitors' revenue is global and covers várias indústrias.")
print("Portanto, a comparação é para dar uma noção geral, não uma comparação direta.")